# Given the root of a binary tree, return the inorder traversal of its nodes' values.
# Inorder traversal means: 
#    - Traverse the left subtree
#    - Visit the root
#    - Traverse the right subtree

class BinaryTree:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left 
        self.right = right

class Solution:
    def BinaryTreeInorderTraversal(self, root):
        current = root 
        result = []
        stack = []
        while current or stack:
            #Â Add all the left nodes to the stack
            while current:
                stack.append(current.left)
                current = current.left

            # Add left node to the final returned list
            current = stack.pop()
            result.append(current)

            # Check right-side
            current = current.right 
        
        return result

sol = Solution()
sol.BinaryTreeInorderTraversal(root = [1,None,2,3])